openapi: 3.0.0
info:
  title: advancedSE-Project
  description: COMS W4156 Project
  version: 0.1.0
  contact:
    name: Team Aapi
    url: https://github.com/junyanj1/advancedSE-Project

# Creat User
# Create Event
# Send Invitation
# Get status
# Get Attendance
# RSVP
# Check-in

servers:
  - url: http://team-aapi.me

externalDocs:
  description: Project Repository
  url: https://github.com/junyanj1/advancedSE-Project
tags:
  - name: User
    description: Things that organizer can do
  - name: Event
    description: Event related APIs
  - name: Attendance
    description: Attendance, Check-in, APIs
  - name: Management
paths:
  /signin:
    post:
      tags:
        - User
      summary: exchange id_token and key
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 401
                  name:
                    type: string
                    example: Unauthorized
                  description:
                    type: string
                    example: Invalid parameter value
      security:
        - OpenIDC: []
  /users:
    post:
      tags:
        - User
      summary: Create a new User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Triggered when input is invalid or user_id already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 400
                  name:
                    type: string
                    example: Bad Request
                  description:
                    type: string
                    example: "Wrong token format: xxx"
  /users/{user_id}:
    get:
      tags:
        - User
      summary: Get User detail
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: "Forbidden, when user does not exist or permission error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 403
                  name:
                    type: string
                    example: "Forbidden"
                  description:
                    type: string
                    example: "User information not available"
      security:
        - ApiKeyAuth: []
  /users/{user_id}/events:
    get:
      tags:
        - User
      summary: Get a list of events created by this user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Event"
      security:
        - ApiKeyAuth: []

  /events:
    post:
      tags:
        - Event
      summary: Create a new Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPostBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: "Bad request, when user id does not exists"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 400
                  name:
                    type: string
                    example: "Bad request"
                  description:
                    type: string
                    example: ""
      security:
        - ApiKeyAuth: []
  /events/{event_id}:
    get:
      tags:
        - Event
      summary: Get Event detail
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
      security:
        - ApiKeyAuth: []

  /events/{event_id}/attendances:
    get:
      tags:
        - Attendance
      summary: Get list of attendees/rsvp/invited people of an event
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
        - name: is_invited
          in: query
          schema:
            type: boolean
          example: true
        - name: is_rsvped
          in: query
          schema:
            type: boolean
          example: true
        - name: is_checked_in
          in: query
          schema:
            type: boolean
          example: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Attendance"
      security:
        - ApiKeyAuth: []
  /events/{event_id}/invite:
    post:
      tags:
        - Attendance
      summary: Request invites
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  description: list of emails
                  items:
                    type: string
                  example:
                    - abc@abc.com
                    - def@def.com
      responses:
        "200":
          description: OK
      security:
        - ApiKeyAuth: []
  /events/{event_id}/rsvp/{personal_code}:
    get:
      tags:
        - Attendance
      summary: RSVP (see description)
      description: |
        This API is intended to be used by the invitee. This link should be
        sent to the user. When the user invokes this link, the server finds
        the user based on the personalized code and marks this invitee as rsvped.
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
        - name: personal_code
          in: path
          required: true
          schema:
            type: string
          description: A unique code
      responses:
        "200":
          description: OK
  /events/{event_id}/check_in/{personal_code}:
    get:
      tags:
        - Attendance
      summary: Check In (see description)
      description: |
        This API is intended to be used by the attendee. When the user invokes
        this link, the server finds the user based on the personalized code and
        check this person in.
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
        - name: personal_code
          in: path
          required: true
          schema:
            type: string
          description: A unique code
      responses:
        "200":
          description: OK
  /health:
    get:
      tags:
        - Management
      summary: Check server status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  commit_id:
                    type: string
                    example: abcdef0
                  status:
                    type: string
                    example: UP
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: aapi-key
    OpenIDC:
      type: apiKey
      in: header
      name: aapi-token
  schemas:
    User:
      type: object
      properties:
        org_name:
          type: string
          example: Columbia University
          nullable: true
        user_id:
          type: string
          example: abc@abc.com
        username:
          type: string
          example: Pikachu
          description: Display name
          nullable: true
        aapi-key:
          type: string
          example: WE3rK0QQuUkyKrEWavIsEcGX3Q8ZzVNTkUZb88OL
          description: api key
    EventPostBody:
      type: object
      properties:
        user_id:
          type: string
          example: abc@abc.com
        event_name:
          type: string
          example: Winter Career Fair
        description:
          type: string
          example: "This is a winter career fair"
        address:
          type: string
          example: "2960 Broadway, New York, NY 10027"
        location_name:
          type: string
          example: "Columbia University"
        lat:
          type: number
          example: 12.34
          nullable: true
        long:
          type: number
          example: 12.34
          nullable: true
        start_time:
          type: string
          example: "2023-11-16 12:10"
        end_time:
          type: string
          example: "2023-11-16 12:10"
        attendee_limit:
          type: number
          example: 30
    Event:
      allOf:  # Combines the EventPostBody and the inline model
        - type: object
          properties:
            event_id:
              type: string
              example: abcdefghijklmn
              description: Uniquely identifies the Event
        - $ref: '#/components/schemas/EventPostBody'
    Attendance:
      type: object
      properties:
        event_id:
          type: string
          example: abcdefghijklmn
        email:
          type: string
          example: abc@abc.com
        is_invited:
          type: boolean
          example: true
        is_rsvped:
          type: boolean
          example: true
        is_checked_in:
          type: boolean
          example: true
